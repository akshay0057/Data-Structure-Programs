'''
enqueue - O(n)
dequeue - O(1)
'''

class queueUsingTwoStacks:
    def __init__(self):
        self.__s1 = [ ]
        self.__s2 = [ ]

    def enqueue(self, data):
        if self.isEmpty():
            self.__s1.append(data)
        else:
            while len(self.__s1) != 0:
                self.__s2.append(self.__s1.pop())
            self.__s1.append(data)
            while len(self.__s2) != 0:
                self.__s1.append(self.__s2.pop())

    def dequeue(self):
        if self.isEmpty():
            print('Queue is Empty')
        return self.__s1.pop()

    def size(self):
        return len(self.__s1)

    def front(self):
        return self.__s1[len(self.__s1) - 1]

    def isEmpty(self):
        return self.size() == 0

q = queueUsingTwoStacks()
q.enqueue(10)
q.enqueue(20)
q.enqueue(30)
q.enqueue(40)
print(q.dequeue())
print(q.dequeue())
print(q.size())
print(q.front())
print(q.isEmpty())
